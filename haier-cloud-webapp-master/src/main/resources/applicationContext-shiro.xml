<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">


	<description>apache shiro 配置</description>

	<!-- 自定义shiro的realm数据库身份验证 -->
	<bean id="jdbcAuthenticationRealm"
		class="cn.edu.sjtu.se.dslab.haiercloud.web.auth.JdbcAuthenticationRealm">
		<property name="name" value="jdbcAuthentication" />
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5" />
			</bean>
		</property>
		<property name="defaultPermissionString" value="security:change-password,security:home" />
		<property name="authorizationCacheName" value="shiroAuthorizationCache" />
	</bean>

	<!-- shiro 的缓存管理,使用spring的ehCacheManagerFactory, 操作spring缓存工厂来及时更新shiro的缓存管理 
		ehCacheManagerFactory对象在applicationContext-core.xml中配置 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory" />
	</bean>

	<!-- 使用默认的WebSecurityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- realm认证和授权,从数据库读取资源 -->
		<property name="realm" ref="jdbcAuthenticationRealm" />
		<!-- cacheManager,集合spring缓存工厂 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- rememberMeManager使用自定义的org.exitsoft.showcase.service.account.CustomRememberMeManager -->
		<!--  
		<property name="rememberMeManager" ref="customRememberMeManager" />
		-->
	</bean>

	<!-- 自定义对 shiro的连接约束,结合shiroSecurityFilter实现动态获取资源 -->
	<bean id="chainDefinitionSectionMetaSource"
		class="cn.edu.sjtu.se.dslab.haiercloud.web.auth.ChainDefinitionSectionMetaSource">
		<!-- 默认的连接配置 -->
		<property name="filterChainDefinitions">
			<value>
				/resource/** = anon
				/unauthorized = anon
				/login = anon
				/login/submit = anon
				/logout = anon
				/register = anon
				/register/submit = anon
				/home = perms[security:home]
				/changePassword = perms[security:change-password]
			</value>
		</property>
	</bean>

	<!-- 将shiro与spring集合 -->
	<bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!--
		<property name="filters">
			<map>
				<entry key="captchaAuthc" value-ref="captchaAuthenticationFilter" />
			</map>
		</property>
		-->
		<!-- shiro的核心安全接口 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接 该连接是LoginController.login()方法 -->
		<property name="loginUrl" value="/login" />
		<!-- 登陆成功后要跳转的连接，该连接是HomeController.getHomePage()方法 -->
		<property name="successUrl" value="/home" />
		<!-- 未授权时要跳转的链接 -->
		<property name="unauthorizedUrl" value="/unauthorized" />
		<!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->
		<property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>

	<!-- shiro为集成spring -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 启用shiro为spring配置的bean注释，只运行在lifecycleBeanProcessor之后 -->
	<bean id="annotationProxy"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<!-- 启用shrio授权注解拦截方式 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>